// Prisma schema for GarageMatch
// Datasource
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  GARAGE_OWNER
  CLIENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum GarageStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

// Core models
model User {
  id        String   @id @default(cuid()) @db.VarChar(191)
  email     String   @unique @db.VarChar(191)
  password  String   @db.VarChar(191)
  name      String   @db.VarChar(191)
  role      Role     @default(CLIENT)
  phone     String?  @db.VarChar(64)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Relations
  ownedGarages Garage[]
  bookings     Booking[]
  reviews      Review[]
  favorites    Favorite[]
  fromMessages Message[] @relation("FromMessages")
  toMessages   Message[] @relation("ToMessages")
}

model Garage {
  id          String   @id @default(cuid()) @db.VarChar(191)
  ownerId     String   @db.VarChar(191)
  name        String   @db.VarChar(191)
  description String?  @db.Text
  // Location
  addressLine1 String?  @db.VarChar(191)
  addressLine2 String?  @db.VarChar(191)
  city         String?  @db.VarChar(191)
  state        String?  @db.VarChar(191)
  postalCode   String?  @db.VarChar(64)
  country      String?  @db.VarChar(64)
  latitude     Float?
  longitude    Float?
  // Business
  hourlyRate    Decimal? @db.Decimal(10,2)
  dailyRate     Decimal? @db.Decimal(10,2)
  amenities     Json?
  status        GarageStatus @default(DRAFT)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  // Relations
  owner     User    @relation(fields: [ownerId], references: [id])
  photos    GaragePhoto[]
  bookings  Booking[]
  reviews   Review[]
  favorites Favorite[]

  @@index([ownerId])
  @@index([city])
  @@index([status])
}

model GaragePhoto {
  id        String   @id @default(cuid()) @db.VarChar(191)
  garageId  String   @db.VarChar(191)
  url       String   @db.Text
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  garage Garage @relation(fields: [garageId], references: [id])

  @@index([garageId])
}

model Booking {
  id         String        @id @default(cuid()) @db.VarChar(191)
  garageId   String        @db.VarChar(191)
  userId     String?       @db.VarChar(191)
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  totalPrice Decimal?      @db.Decimal(10,2)
  notes      String?       @db.Text
  // Guest booking contact (for non-registered users)
  contactEmail String?     @db.VarChar(191)
  contactPhone String?     @db.VarChar(64)
  createdAt  DateTime      @default(now()) @db.Timestamp(6)
  updatedAt  DateTime      @updatedAt @db.Timestamp(6)

  garage Garage @relation(fields: [garageId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([garageId])
  @@index([userId])
  @@index([startTime, endTime])
}

model Review {
  id        String   @id @default(cuid()) @db.VarChar(191)
  garageId  String   @db.VarChar(191)
  userId    String   @db.VarChar(191)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(6)

  garage Garage @relation(fields: [garageId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([garageId])
  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid()) @db.VarChar(191)
  userId    String   @db.VarChar(191)
  garageId  String   @db.VarChar(191)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  user   User   @relation(fields: [userId], references: [id])
  garage Garage @relation(fields: [garageId], references: [id])

  @@unique([userId, garageId])
  @@index([userId])
  @@index([garageId])
}

// Messages (kept compatible with existing API and importer)
model Message {
  id             String   @id @default(cuid()) @db.VarChar(191)
  conversationId String   @db.VarChar(191)
  fromUserId     String   @db.VarChar(191)
  toUserId       String   @db.VarChar(191)
  body           String   @db.Text
  createdAt      DateTime @default(now()) @db.Timestamp(6)

  // Optional relations to users for richer queries
  fromUser User @relation("FromMessages", fields: [fromUserId], references: [id])
  toUser   User @relation("ToMessages", fields: [toUserId], references: [id])

  @@index([conversationId, createdAt])
  @@index([fromUserId])
  @@index([toUserId])
}
